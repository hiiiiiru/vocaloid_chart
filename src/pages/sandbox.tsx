import Head from "next/head"
import { useEffect, useState } from "react"
import { Button, Container, Box } from "@chakra-ui/react"
import { useRouter } from "next/router"

import InitService from "../lib/services/init.service"
import PrismaService from "../lib/services/prisma.service"
import { Statistic, YoutubeChannel } from "@prisma/client"
import { chunk } from "../lib/helper/lodash-alt"
import { OtherUsers } from "../../database/other_user"
import { CHANNEL_IDS } from "../../database/channel_ids"
import HelperService from "../lib/services/helper.service"
import exportFromJSON from "export-from-json"
import { fetcher } from "../lib/helper/async"
import { CHANNEL_USERS } from "../../database/channel_users"
import ChartHelper from "../lib/helper/chart"
import { STATISTIC_WEEK_0 } from "../../database/statistic_week_0"

// TODO
// Add IA official

export default function Home(props) {
  const [videos, setVideos] = useState([])
  const [channels, setChannels] = useState([])
  const [statistics, setStatistics] = useState([])
  const [chart, setChart] = useState([])

  const init = new InitService()
  const prisma = new PrismaService()
  const helper = new ChartHelper()

  useEffect(() => {
    const getChannels = async () => {
      const res = await prisma.getChannels()

      if (res.isSuccess) {
        const data = res.getValue()

        setChannels(data)
      }
    }

    const getVideos = async () => {
      const res = await prisma.getVideos()

      if (res.isSuccess) {
        const data = res.getValue()

        setVideos(data)
      }
    }

    const getStatistic = async () => {
      const res = await prisma.getStatistic()

      if (res.isSuccess) {
        const data = res.getValue()
        console.log(data)
        setStatistics(data)
      }
    }

    getChannels()
    // getVideos()
    // getStatistic()
  }, [])

  const generateVideos = async () => {
    try {
      await init.initChannelVideos(channels)
    } catch (error) {
      console.log(error)
    }
  }

  const generateStatistic = async () => {
    try {
      console.log(videos)
      const chunked = chunk(videos, 50)

      // const res = await init.initStatistic(chunked[0], 0)

      // console.log(res.isSuccess)

      const resAll = chunked.map((item) => {
        return init.initStatistic(item, 1)
      })

      await Promise.all(resAll)
    } catch (error) {
      console.log(error)
    }
  }

  const generateChart = () => {
    const array = []

    for (let index = 0; index < statistics.length; index++) {
      const element = statistics[index]

      const obj = helper.chartMaker(element, STATISTIC_WEEK_0, element.video)
      array.push(obj)
    }

    setChart(array)
    exportFromJSON({ data: array, fileName: "chart_jul_3", exportType: "csv" })
    exportFromJSON({ data: array, fileName: "chart_jul_3", exportType: "json" })

    return array
  }

  return (
    <>
      <Head>
        <title>Sandbox Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container maxW="container.lg">
        <Button colorScheme="teal" onClick={generateVideos}>
          Generate Video
        </Button>
        <Button colorScheme="teal" onClick={generateStatistic}>
          Generate Statistic
        </Button>
        <Button colorScheme="teal" onClick={generateChart}>
          Generate Chart
        </Button>
      </Container>

      {/* <pre>
        <pre>{JSON.stringify(videos, null, 2)}</pre>
      </pre> */}
    </>
  )
}
